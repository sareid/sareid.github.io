<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: front-end | andrew does his best]]></title>
  <link href="http://sareid.github.io/blog/categories/front-end/atom.xml" rel="self"/>
  <link href="http://sareid.github.io/"/>
  <updated>2016-08-03T21:46:45-04:00</updated>
  <id>http://sareid.github.io/</id>
  <author>
    <name><![CDATA[Andrew Reid]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ES2015 and Destructuring Assignment]]></title>
    <link href="http://sareid.github.io/blog/2016/08/03/es6-and-the-destructuring-assignment/"/>
    <updated>2016-08-03T13:04:22-04:00</updated>
    <id>http://sareid.github.io/blog/2016/08/03/es6-and-the-destructuring-assignment</id>
    <content type="html"><![CDATA[<p>This blog is a simple one - I just wanted to write a bit about a neat technique in ES2015 that I was heretofore unfamiliar with: destructuring assignment.</p>

<p>Recently, while reading a <a href="https://emberway.io/ember-js-and-html5-drag-and-drop-fa5dfe478a9a#.4fqjphkvm">blog post</a> on implementing drag and drop functionality in Ember.js with HTML5, I noticed a method of variable declaration in JavaScript that was new to me. In the code for a specific component, I saw this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ember</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="p">{</span> <span class="nx">set</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
The first line is one I&rsquo;ve seen a lot - it assigns the actual Ember.js library in the form of an object to an &lsquo;Ember&rsquo; variable, giving us easy access to it in the subsequent code. This object consists of a large number of properties, each of which is a method from the Ember.js library. The next line was a bit more puzzling to me. Why was the variable name wrapped in curly braces like that?</p>

<p>So, I did what <a href="http://www.theallium.com/engineering/computer-programming-to-be-officially-renamed-googling-stackoverflow/">programmers do best</a>, and soon found myself on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">relevant part</a> of MDN&rsquo;s JavaScript section. Here&rsquo;s what I learned.</p>

<h3>Destructuring assignment</h3>

<p>A new feature in <a href="https://babeljs.io/docs/learn-es2015/">ES2015</a>, destructuring assignment syntax allows us to &ldquo;extract data from arrays or objects into distinct variables&rdquo;. What this means, is that given an array or object, we can declare a variable and immediately assign it specific elements or properties as a value. Here&rsquo;s a simple example (we&rsquo;ll start with arrays and then move to objects):
<code>javascript
var array = [1,2,3,4]
var [first, second] = array;
console.log(first); // 1
console.log(second); // 2
</code>
As you can see, using destructuring assignment in line 2, we declare <code>first</code> and <code>second</code> variables, and assign them values corresponding to the same elements in the <code>array</code> variable. In this case, the first two elements are used, and the rest are automatically skipped. But we could skip the first element too, like this:
<code>javascript
var array = [1,2,3,4]
var [, second] = array;
console.log(first); // We get an error, telling us that 'first' is undefined.
console.log(second); // 2
</code>
We can also assign default values, in case the data extracted from an array is undefined, like the following:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">[</span><span class="nx">first</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="nx">second</span><span class="o">=</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span> <span class="c1">// 1</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span> <span class="c1">// 7</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Object destructuring</h3>

<p>Just like with the examples of arrays above, we can use destructuring assignment on objects too, assigning specific object properties as values to the newly declared variables. Take the following example, where the <code>outfit()</code> function returns an object.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">outfit</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">pants</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">blue</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">shirt</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">red</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">hat</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">yello</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;};</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="p">{</span><span class="nx">pants</span><span class="p">}</span> <span class="o">=</span> <span class="nx">outfit</span><span class="p">();</span> <span class="c1">// pants = &amp;ldquo;blue&amp;rdquo;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">As</span> <span class="nx">was</span> <span class="nx">the</span> <span class="k">case</span> <span class="kd">with</span> <span class="nx">elements</span> <span class="nx">of</span> <span class="nx">arrays</span><span class="p">,</span> <span class="nx">we</span> <span class="nx">use</span> <span class="nx">destructuring</span> <span class="nx">assignment</span> <span class="nx">to</span> <span class="nx">assign</span> <span class="nx">a</span> <span class="nx">specific</span> <span class="nx">property</span> <span class="nx">of</span> <span class="nx">an</span> <span class="nx">object</span> <span class="nx">as</span> <span class="nx">the</span> <span class="nx">variable</span><span class="s1">&#39;s value - in this case, picking out the `pants` propety so the newly declared variable has a value of the string of &#39;</span><span class="nx">blue</span><span class="err">&#39;</span><span class="p">.</span> <span class="nx">We</span> <span class="nx">can</span> <span class="nx">also</span> <span class="nx">use</span> <span class="k">this</span> <span class="nx">assign</span> <span class="nx">properties</span> <span class="nx">to</span> <span class="nx">variables</span> <span class="kd">with</span> <span class="nx">different</span> <span class="nx">names</span><span class="p">,</span> <span class="nx">using</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">syntax</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;javascript</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">outfit</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">pants</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">blue</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">shirt</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">red</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">hat</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">yello</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;};</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="p">{</span><span class="nx">pants</span><span class="o">:</span> <span class="nx">trousers</span><span class="p">}</span> <span class="o">=</span> <span class="nx">outfit</span><span class="p">();</span> <span class="c1">// trousers = &amp;ldquo;blue&amp;rdquo;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="nx">Here</span><span class="p">,</span> <span class="nx">the</span> <span class="k">new</span><span class="o">&lt;</span><span class="err">/code&gt;trousers&lt;code&gt;variable has the same value as the&lt;/code&gt;pants` property.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Back</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">initial</span> <span class="nx">example</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Okay</span><span class="p">,</span> <span class="nx">so</span> <span class="nx">now</span> <span class="nx">that</span> <span class="nx">we</span> <span class="nx">understand</span> <span class="nx">destructuring</span> <span class="nx">assignment</span> <span class="nx">a</span> <span class="nx">little</span> <span class="nx">better</span><span class="p">,</span> <span class="kd">let</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="nx">s</span> <span class="nx">look</span> <span class="nx">at</span> <span class="nx">that</span> <span class="nx">original</span> <span class="nx">bit</span> <span class="nx">of</span> <span class="nx">code</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">blog</span> <span class="nx">above</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>javascript
import Ember from &lsquo;ember&rsquo;;</p>

<p>var { set } = Ember;
<code>
So, clearly we're looking for a property called 'set' that exists in the variable `Ember`. If you recall from above, the first line of code created the variable `Ember`, which is an object whose properties are the set of functions comprising the Ember.js library. Looking into the Ember.js library, we find a place where a `set` function is defined, and above it the following note:
</code>javascript</p>

<p>  /**
    Sets the value of a property on an object, respecting computed properties
    and notifying observers and other listeners of the change. If the
    property is not defined but the object implements the <code>setUnknownProperty</code>
    method then that will be invoked as well.</p>

<pre><code>...
</code></pre>

<p>  */
<code>``
 By using destructuring assignment, we assigned the</code>set<code>variable the value of the</code>set<code>function property from this object, which (we can see from the description) lets us change the values on an object in a way that will trigger any observers, listeners, or computed properties, meaning that changes will be reflected in the view. So, basically it's equivalent of calling</code>Ember.set()`.</p>

<p>Why do this? Afterall, it&rsquo;s not much more effort to simply invoke the function with <code>Ember.set()</code>. There are a couple of reasons to use destructuring assignment in general, but in this case I think the answer lies in ensuring the code is resilient. Take a look at the rest of the code from the controller:
```javascript
export default Ember.Component.extend({
classNames        : [ &lsquo;draggableDropzone&rsquo; ],
classNameBindings : [ &lsquo;dragClass&rsquo; ],
dragClass         : &lsquo;deactivated&rsquo;,</p>

<p>dragLeave(event) {
  event.preventDefault();
  set(this, &lsquo;dragClass&rsquo;, &lsquo;deactivated&rsquo;);
},</p>

<p>dragOver(event) {
  event.preventDefault();
  set(this, &lsquo;dragClass&rsquo;, &lsquo;activated&rsquo;);
},</p>

<p>drop(event) {
  var data = event.dataTransfer.getData(&lsquo;text/data&rsquo;);
  this.sendAction(&lsquo;dropped&rsquo;, data);</p>

<p>  set(this, &lsquo;dragClass&rsquo;, &lsquo;deactivated&rsquo;);
}
});
<code>
As you can see, `set` is called in three different locations. If the `set` function in the Ember.js library were renamed or deprecated at any point, then code in this example might break. If we were calling `Ember.set()` instead of using destructuring assignments and then calling `set()` each time, we would then have to fix each instance of `Ember.set()`. As it stands, we would only have to change the initial variable assignment. Let's say the `set` function in the Ember.js library was renamed `assign`, we could simply change things to:
</code>javascript
import Ember from &lsquo;ember&rsquo;;</p>

<p>var { assign: set } = Ember;
<code>``
As we learned above, this extracts the hypothetical</code>assign<code>function from the Ember.js library, and assigns it to a new</code>set<code>variable. The existing</code>set` variables would still work through the rest of the code, saving us having to fix each case.</p>

<h3>Conclusion</h3>

<p>All in all, destructuring assignments is a cool bit of syntactic sugar that can help make your code simpler and more resilient. In particular, I see use cases with nested arrays, or when you want to declare a variable with a selection of some of object&rsquo;s properties where this could save several lines of code by not having to declare each variable individually. I&rsquo;ve only covered part of the functionality here, so to learn more see the full MDN documentation <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query Params, Metadata and Pagination in Ember.js]]></title>
    <link href="http://sareid.github.io/blog/2016/07/13/using-query-params-in-ember-dot-js/"/>
    <updated>2016-07-13T14:09:31-04:00</updated>
    <id>http://sareid.github.io/blog/2016/07/13/using-query-params-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>A little earlier this year, I was reading an organisation&rsquo;s style guide for working with Ember.js, when I encountered reference to the use of &lsquo;query params&rsquo; in a controller. At the time, still relatively new to Ember, I had no idea what this meant. In the intervening time, though I&rsquo;ve learned a lot. Basically, query params allow for certain application states to be serialised into the URL that wouldn&rsquo;t be otherwise possible through the regular use of routes. In this blog post, I&rsquo;m going to explain the role of query params, and how they can be used in your Ember app to provide some neat functionality. I&rsquo;ll be using a sample Ember.js front-end app, with a Rails API on the back-end.<!--more--></p>

<h3>Query Param Basics</h3>

<p>Consider the following URL: <code>http://www.fakewebsite.com/recipes?page=2</code>. The text to the right of the &lsquo;?&rsquo; is a query param - in this case &lsquo;page&rsquo;, with a value of 2. As you might guess, this url represents the second &lsquo;page&rsquo; of a longer list of recipes. If you had 1000 recipes in your database, you can understand the utility for paginating the index page into smaller chunks. The user probably finds it easier to read a smaller number of recipes, from a UX perspective it may be preferable to avoid scrolling through long lists, and if there is any heavy logic being done on the back-end, it&rsquo;s faster to simply request 10, 25 or 50 entries at a time than the full 1000. Other uses for query params can include sorting and filtering your database according to certain properties.</p>

<p>Query params are declared in the relevant controller of the route you&rsquo;re working with. So, if you want query params for a &lsquo;recipes&rsquo; route, the query params are declared in <code>app/controllers/recipes.js</code> (or the <code>controller.js</code> file in the <code>recipes</code> directory if you&rsquo;re working with pods). Specific instructions for declaring query params can be <a href="https://guides.emberjs.com/v2.6.0/routing/query-params/">found in the Ember docs</a>, but lets build out an app to see how they work.</p>

<h3>Getting started</h3>

<p>To test out query params, I built an Ember.js app that displays a list of friends with a number of properties (like name, email, phone number, age, etc). The data is served as JSON from a Rails API.</p>

<p>The finished code can be found here: <a href="https://github.com/sareid/query-params">Ember front-end</a> &amp; <a href="https://github.com/sareid/query-params-api">Rails API</a></p>

<h3>Setting up the Rails API and adding a root node</h3>

<p>I&rsquo;m not going to go into all the steps of setting up a Rails API. Sophie DeBenedetto has a great step-by-step guide for this on her blog <a href="http://www.thegreatcodeadventure.com/building-a-super-simple-rails-api/">here</a>. This app has a single model, Person, and a single route <code>people</code>. You can take a look at the <a href="https://github.com/sareid/query-params-api/blob/master/query-params-api/db/migrate/20160712181102_create_person.rb">migration file</a> to see the properties of the model.</p>

<p>To populate the database with entries, I wrote a <code>seed.rb</code> file that makes 400 instances of people using the <a href="https://github.com/stympy/faker">Faker gem</a> which automatically generates content for different types of properties, like this:
<code>ruby
400.times do
  person = Person.create(
    first_name: Faker::Name.first_name,
    last_name: Faker::Name.last_name,
    nick_name: Faker::Superhero.name,
    age: Faker::Number.between(18, 99),
    email: Faker::Internet.email,
    phone: Faker::PhoneNumber.phone_number,
    friends_since: Faker::Time.backward(5004, :evening)
  )
end
</code></p>

<p>There is one extra thing we need to do beyond Sophie&rsquo;s instructions: recent updates to the Active Model Serializer gem use the <code>Attributes</code> adapter for serializing JSON, which excludes the root node (eg, the name of the model). As such, we get JSON like this:</p>

<pre><code class="json">{
id: 1,
first_name: "Aiden",
last_name: "Stamm",
nick_name: "Doctor Match",
age: 35,
email: "devan@predovicortiz.org",
phone: "562.135.0643 x8216",
friends_since: "2007-01-09T00:49:32.000Z"
},
{
id: 2,
first_name: "Jamie",
last_name: "Boyer",
nick_name: "Songbird",
age: 56,
email: "neva@hartmann.co",
phone: "(858) 284-7728",
friends_since: "2007-07-30T21:08:20.000Z"
}
</code></pre>

<p>For the model hook in Ember to function properly, we need a root node with the name of model. To do so, we need to instruct Rails to use the <code>JSON</code> adapter. In the <code>config/intializers</code> directory, I included a <code>serializer.rb</code> file with the following line of code:</p>

<pre><code class="ruby">ActiveModelSerializers.config.adapter = :json
</code></pre>

<p>With that change, the JSON served by our API looks like this:</p>

<pre><code class="json">people: [
{
id: 1,
first_name: "Aiden",
last_name: "Stamm",
nick_name: "Doctor Match",
age: 35,
email: "devan@predovicortiz.org",
phone: "562.135.0643 x8216",
friends_since: "2007-01-09T00:49:32.000Z"
},
{
id: 2,
first_name: "Jamie",
last_name: "Boyer",
nick_name: "Songbird",
age: 56,
email: "neva@hartmann.co",
phone: "(858) 284-7728",
friends_since: "2007-07-30T21:08:20.000Z"
}
]
</code></pre>

<p>That&rsquo;s great for now - our API is serving JSON. Let&rsquo;s set up our Ember front-end.</p>

<h3>Building an Ember app and connecting it to the API</h3>

<p>To start, generate a new Ember app with the <code>ember new</code> command (for more, <a href="https://guides.emberjs.com/v2.6.0/getting-started/quick-start/#toc_create-a-new-application">see the Ember docs</a>).</p>

<p>In this project, I just wanted to build an index page for all the people in the database. As such, we need to set up the route, model, route handler, template and controller for &lsquo;people&rsquo; (fun note: the Inflector in Rails is smart enough to know that &lsquo;people&rsquo; is the plural of &lsquo;person&rsquo;). Run <code>ember g resource people</code>. This creates three important files: <code>app/models/person.js</code>, <code>app/routes/people.js</code>, and <code>app/templates/people.hbs</code> (as well as a file for tests). It also adds the appropriate route - if you look in your <code>app/router.js</code> file you&rsquo;ll see the following:</p>

<pre><code class="javascript">import Ember from 'ember';
import config from './config/environment';

const Router = Ember.Router.extend({
  location: config.locationType
});

Router.map(function() {
  this.route('people');
});

export default Router;
</code></pre>

<p>If we run our server (<code>ember s</code>) we can navigate to <code>http://localhost:4200/people</code>. There&rsquo;s nothing there yet, of course, but it&rsquo;s a route! We need to fill out a few more things before our Ember app can actually make requests to our Rails API. First, lets build out the rest of the &lsquo;people&rsquo; resource.</p>

<p>We need to define the &lsquo;person&rsquo; model and the types of properties that will provided by our API. In <code>app\models\person.js</code> we add the following:</p>

<pre><code class="javascript">import DS from 'ember-data';
import attr from 'ember-data/attr';

export default DS.Model.extend({
  first_name: attr(),
  last_name: attr(),
  nick_name: attr(),
  age: attr(),
  email: attr(),
  phone: attr(),
  friends_since: attr(),

});
</code></pre>

<p>We then need to add a model hook to the &lsquo;people&rsquo; route handler that will load the model from the store. In the <code>app\routes\people.js</code> we add the following:</p>

<pre><code class="javascript">
import Ember from 'ember';

export default Ember.Route.extend({
  model: function() {
    return this.store.findAll('person');
  }
});
</code></pre>

<p>For the moment, we don&rsquo;t need to add anything new to our controller, but we do need to fill out the <code>app/templates/people.hbs</code> template a bit. To make our front-end styling a little simpler, I&rsquo;m using the <a href="http://foundation.zurb.com/">Zurb Foundation</a> responsive framework. Don&rsquo;t worry if you don&rsquo;t understand how it works. I installed into my Ember app using the <a href="https://github.com/nadavshatz/ember-cli-foundation-sass">Ember Cli Foundation Sass addon</a>.</p>

<p>In the template, I build a table of all the people in our database using the <code>{ {#each model as |person|} }</code> helper. It looks like this (ignore the spaces between the curly braces):</p>

<p>```</p>

<table>
  <thead>
    <th>First Name</th>
    <th>Last Name</th>
    <th>Nickname</th>
    <th>Age</th>
    <th>Email</th>
    <th>Phone</th>
    <th>Friends Since</th>
  </thead>
  <tbody>
    { {#each model as |person|} }
    <tr>
      <td>{ {person.first_name} }</td>
      <td>{ {person.last_name} }</td>
      <td>{ {person.nick_name} }</td>
      <td>{ {person.age} }</td>
      <td>{ {person.email} }</td>
      <td>{ {person.phone} }</td>
      <td>{ {person.friends_since} }</td>
    </tr>
    
  </tbody>
</table>


<p><code>``
If we navigate to</code><a href="http://localhost:4200/people">http://localhost:4200/people</a>` we can see our table rendered with the people in our database! That&rsquo;s great. Though, with 400 entries in the database, it involves a LOT of scrolling:</p>

<div style='position:relative;padding-bottom:calc(100% / 1.60)'><iframe src='https://gfycat.com/ifr/TiredHeavyAidi' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>


<p>Ideally, we&rsquo;d like to see things in smaller chunks - that&rsquo;s the whole point of this blog post, afterall! To do this, we need to go back to our API and include some metadata about pagination in the JSON being served.</p>

<h3>Paginating JSON and serving metadata</h3>

<p>When a GET request is sent to the <code>api/v1/people</code> route of our API, the back-end is currently serving all 400 entries back as a response. We need a way to both break the JSON being served into smaller segments, but also to serve information about the data itself (metadata). In the case of pagination, this metadata will include information like how many chunks or &lsquo;pages&rsquo; the database has been segmented into, as well as the current page being served.</p>

<p>The simplest way to incorpate pagination into your API is through the <a href="https://github.com/amatsuda/kaminari">Kaminari gem</a>. There are other options out there, but the comments I&rsquo;ve seen on Stack Overflow and elsewhere seem to favour this gem. Install it by including <code>gem 'kaminari'</code> in your Gemfile, and running <code>$ bundle</code>. With this done, we need to make some changes to our People Controller, as follows:</p>

<pre><code class="ruby">class Api::V1::PeopleController &lt; ApplicationController

  def index

    info = {
      page: params[:page] || 1,
      per_page: params[:per_page] || 10
    }

    @people = Person.page(info[:page]).per(info[:per_page])

    render json: @people, params: info
  end

end
</code></pre>

<p>The info hash sets defaults for the current page, as well as the number of entries per page. Eventually, params included in requests from the Ember app will include the page number, which is what is being used when the Person model is being queried to create the <code>@people</code> variable being rendered as JSON. If we go to <code>http://localhost:3000/people</code>, we&rsquo;ll see that only 10 entries are being served in the JSON. If we got to <code>http://localhost:3000/api/v1/people?page=2</code> we see the next 10 in the database. Cool!</p>

<p>But that&rsquo;s not all - we also need to serve the metadata, telling the Ember app things like which page we&rsquo;re on and how many pages there currently are. Looking at the <a href="https://github.com/rails-api/active_model_serializers/blob/master/docs/howto/add_pagination_links.md#json-adapter">documentation for Active Model Serializer</a>, the solution is quite simple. In our API controller (effectively the application controller), we add the following:</p>

<pre><code class="ruby">def pagination_dict(object)
  {
    current_page: object.current_page,
    next_page: object.next_page,
    prev_page: object.prev_page, # use object.previous_page when using will_paginate
    total_pages: object.total_pages,
    total_count: object.total_count
  }
end
</code></pre>

<p>And in our People Controller, we make a small addition to the code rendering our JSON:</p>

<pre><code class="ruby">class Api::V1::PeopleController &lt; ApplicationController

  def index

    info = {
      page: params[:page] || 1,
      per_page: params[:per_page] || 10
    }

    @people = Person.page(info[:page]).per(info[:per_page])

    render json: @people, params: info, meta: pagination_dict(@people)
  end
end
</code></pre>

<p>Our JSON now has a &lsquo;meta&rsquo; key attached to the end, like this:</p>

<pre><code class="json">meta: {
current_page: 1,
next_page: 2,
prev_page: null,
total_pages: 40,
total_count: 400
}
</code></pre>

<p>We&rsquo;ll be able to execute a query for this in the People route handler in Ember, giving us access to this metadata in the view. So, now it&rsquo;s time to head back to the Ember app!</p>

<h3>Handling metadata and pagination in Ember</h3>

<p>We need to do a number of steps to handle and use the metadata being served with our JSON in Ember. First, we go to the route handler and change the code to the following:</p>

<pre><code class="javascript">import Ember from 'ember';

export default Ember.Route.extend({

  queryParams: {
    page: {
      refreshModel: true
    }
  },

  model: function(params){
    return this.store.query('person', params);
  }

});
</code></pre>

<p>We&rsquo;ve done a couple of things here. The queryParams property includes a key called &lsquo;page&rsquo;. By setting the refreshModel property to &lsquo;true&rsquo;, any changes to the page query param will fire the model hook and make a new request to the API. So if the url is changed from <code>http://localhost:4200/people</code> to <code>http://localhost:4200/people?page=2</code>, the model will be updated automatically.</p>

<p>Next, we need to actually declare our &lsquo;page&rsquo; query param in the <code>app/controllers/people.js</code> file, and give it some logic.</p>

<pre><code class="javascript">import Ember from 'ember';

export default Ember.Controller.extend({
  queryParams: ['page'],
  page: 1,

  metaData: Ember.computed('model', function(){
    let meta = this.get('model.meta');
    meta['second_last'] = meta.total_pages - 1;
    meta['third_last'] = meta.total_pages - 2;
    return meta;
  }),

  lastThreePages: Ember.computed('model', function(){
    if (this.get('page') &lt; this.get('metaData.total_pages') - 3) {
      return false;
    } else {
      return true;
    }
  }),

  actions: {
    nextPage() {
      if (this.get('page') &lt; this.get('metaData.total_pages')){
        let page = this.get('page');
        this.set('page', page + 1);
      }
    },

    prevPage() {
      if (this.get('page') &gt; 1) {
        this.set('page', this.get('page') - 1);
      }
    }
  }

});
</code></pre>

<p>So what&rsquo;s going on here? First, the <code>queryParams</code> array is defining which specific query params we&rsquo;ll be using. In this case, just one: &lsquo;page&rsquo;. The &lsquo;page&rsquo; property below it gives it a default value of 1 - so if we navigate to just <code>http://localhost:4200/people</code>, it will assume we want the first page.</p>

<p>In the <code>metaData</code> computed property, we are accessing the information in the &lsquo;meta&rsquo; key in the JSON our API is serving, giving us access in the view to information like the current page, which we can invoke with <code>metaData.current_page</code>.</p>

<p>There are also a pair of actions: <code>nextPage</code> and <code>prevPage</code>. These do pretty much what you&rsquo;re thinking they will: when triggered, it will change the &lsquo;page&rsquo; query param to the next or previous page, thus updating the model and serving new entries from the database in our view. In the template we&rsquo;ll have two buttons that trigger these actions. We use conditional statements to make sure we can&rsquo;t advance past the last page in the database, or to a page number lower than 1.</p>

<p>Don&rsquo;t worry about the &lsquo;lastThreePages&rsquo; computed property for now - I&rsquo;m adding the pagination system available in Zurb Foundation, and we&rsquo;ll use that property for some conditionals in the view to change how certain buttons are rendered depending on which page we&rsquo;re on.</p>

<p>So, let&rsquo;s add that to our <code>app/templates/people.hbs</code> files and see what we get. In the template, below the original code for the table, we add new code for pagination buttons. Normally we might choose to separate this into a component, but for time&rsquo;s sake I&rsquo;ve just included it in the template itself. The code is a bit lengthy and not particularly important to what this blog is about. If you&rsquo;d like to see it, it&rsquo;s in <a href="https://github.com/sareid/query-params/blob/master/app/templates/people.hbs">the repository here,</a> but I am also certain there are more elegant ways of doing it.</p>

<p>With that all in place, we get something that looks like this:</p>

<div style='position:relative;padding-bottom:calc(100% / 1.60)'><iframe src='https://gfycat.com/ifr/MarvelousMarvelousDogwoodclubgall' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>


<p>As the buttons on the bottom are pressed, the &lsquo;nextPage&rsquo; function is triggered, updating the &lsquo;page&rsquo; query param and making a new request to our Rails API (again, because we set the <code>refreshModel</code> property to &lsquo;true&rsquo;). The person controller in our API takes in the page parameter in the request, queries the database and serves the appropriate data and metadata back to our Ember app. The controller takes the data for the model, extracts the metadata, and then passes it to update the view.</p>

<h3>Conclusions</h3>

<p>So that&rsquo;s a first look at query params, metadata and pagination in Ember! Don&rsquo;t forget, we can use queryParams to serialise a number of different application states into our URL beyond mere pages. We have a <code>filter</code> query param that looks at a particular property and only returns instances from the database where a condition is met. In this example, maybe we filter to find friends who are a particular age. Or we could sort according to certain categories - maybe I&rsquo;d like to see my friends ranked according to how long I&rsquo;ve known them. We can accomplish all this and more with query params.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating page-specific JavaScript and CSS in Rails]]></title>
    <link href="http://sareid.github.io/blog/2016/04/28/creating-page-specific-javascript-and-css-in-rails/"/>
    <updated>2016-04-28T11:36:24-04:00</updated>
    <id>http://sareid.github.io/blog/2016/04/28/creating-page-specific-javascript-and-css-in-rails</id>
    <content type="html"><![CDATA[<p>The <a href="http://guides.rubyonrails.org/asset_pipeline.html">Rails Asset Pipeline</a> is a really great tool that improves performance by compressing and minifying assets, as well as compiling JS and CSS assets written in other languages, like CoffeeScript and SASS. When compiled, the files in your <code>app/assets/javascripts/</code> folder get processed and minified into a single <code>application.js</code> file. In many cases, this is great - all of the views in your app have access to this file at all times, and it cuts down on the number of server requests made by the browser. But what happens if you want to dynamicaly scope JavaScript functions to specific pages in your app, like a function that only fires when an object view page is loaded?<!--more--></p>

<p>I recently built a <a href="https://github.com/sareid/carrier-selector">small Rails app</a> as a part of an exercise in data analysis and visualisation. Using a set of On-Time performance data for flights in the United States, it visualised various performance criteria to help determine what carrier would be ideal for a New York-based company. As part of the challenge, I wanted to create maps visualising the metropolitan areas served by each carrier, and the relative population sizes of these areas. Here&rsquo;s what the end product looked like:</p>

<p><img src="http://i.imgur.com/1cLwCCb.png" alt="Example bubble map of metropolitan areas" /></p>

<p>To render these maps, I was using the <a href="https://d3js.org/">D3 JavaScript library</a>. I needed to trigger two AJAX requests to my Carrier controller for two TopoJSON files (one for the US map, and one for the metropolitan areas). The latter of these two TopoJSON files was dynamically built in the <code>carriers#data</code> controller action and was unique to each instance of the Carrier model. I wanted these AJAX functions to fire as soon as the show page was loaded.</p>

<p>The typical way to trigger a JavaScript function upon page load would be via a Document Ready function, which fires once the DOM is loaded, as such:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="nb">document</span> <span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Code goes here</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>However, as the Rails Asset Pipeline pre-compiles all your JavaScript and CoffeeScript files into a minified Application.js file, a Document Ready function will fire when any page in your app loads. One solution would have been to create a separate <code>carrier.js</code> file and include it manually in the Carrier show view like so:</p>

<p><code>&lt;%= javascript_include_tag "carrier" %&gt;</code></p>

<p>This would require a separate JS file to be loaded alongside the <code>application.js</code> file, and for me to add specific instructions to the <code>production.rb</code> file. This is okay, but it seemed like there should be a more elegant solution.</p>

<h3>The jQuery ReadySelector plugin</h3>

<p>Indeed, a more elegant solution exists: the <a href="https://github.com/Verba/jquery-readyselector">jQuery ReadySelector plugin</a>. This plugin extends the <code>.ready()</code> function for when a specific element of the DOM is loaded. In Rails, the suggested option is to dynamically generate class names for the <code>&lt;body&gt;</code> tags of your view matching the current controller action being used. Using ERB tags, you can achieve this with the following code:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;&lt;%=</span> <span class="na">controller_name</span> <span class="na">-</span><span class="err">%</span><span class="nt">&gt;</span> <span class="ni">&amp;lt;</span>%= action_name -%&gt;<span class="ni">&amp;ldquo;</span>&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>With this in place, all of my Carrier show pages were rendered inside of <code>&lt;body class="carriers show"&gt;</code> tags. In my <code>carriers.js</code> file, I included the following code that would trigger the relevant AJAX requests whenever a carrier show page was loaded:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;.</span><span class="nx">carriers</span><span class="p">.</span><span class="nx">show</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">GET</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="nx">contentType</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">application</span><span class="o">/</span><span class="nx">json</span><span class="p">;</span> <span class="nx">charset</span><span class="o">=</span><span class="nx">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">data</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">metro</span><span class="o">-</span><span class="nx">map</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">data</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">params</span><span class="o">-</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)},</span>
</span><span class='line'>    <span class="nx">dataType</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">json</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">usData</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">usData</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">draw</span><span class="p">(</span><span class="nx">usData</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>      <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">error</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>A few notes to explain what is happening. This function makes an AJAX request to the <code>#data</code> action in the Carrier controller, which serves back a topoJSON file. You&rsquo;ll note it uses the &lsquo;data&rsquo; field to pass the ID of the specific carrier to controller. I did this by using ERB tags to generate a custom data attribute in the <code>&lt;div&gt;</code> tag of the column I was appending the D3 map too. The value of this attribute corresponded to the ID of the carrier in question. The code for that looked like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-12 text-center&quot;</span> <span class="na">id=</span><span class="s">&quot;metro-map&quot;</span> <span class="err">&lt;%=</span> <span class="err">&quot;</span><span class="na">data-params-id=</span><span class="s">#{params[:id]}&quot;</span> <span class="na">if</span> <span class="na">params</span><span class="err">.</span><span class="na">has_key</span><span class="err">?(</span><span class="na">:id</span><span class="err">)</span> <span class="err">%</span><span class="nt">&gt;</span>&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>The AJAX request uses the <code>.data()</code> function to pass the ID to the controller, which is able to query the database for the carrier in question, and then serve back the needed topoJSON. Upon a successful AJAX request, a second AJAX request is fired to the Carrier controller, this time serving back a static JSON with the information needed to render the map of the USA. The rest of the JavaScript code for rendering the D3 map can be <a href="https://github.com/sareid/carrier-selector/blob/master/app/assets/javascripts/carriers.js.erb">seen here</a>.</p>

<h3>Conclusion</h3>

<p>As you can see, this is a pretty neat trick for scoping your JavaScript to a particular type of view in your Rails app. Using dynamically generated class attributes in your <code>&lt;body&gt;</code> tag, you can have as many specific JavaScript <code>.ready()</code> functions as you have controller actions and views. And don&rsquo;t forget - with these dynamic class attributes, you can also create corresponding custom CSS for particular views too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap: Making front-end development easier since 1842 (note to self: check dates)]]></title>
    <link href="http://sareid.github.io/blog/2016/01/12/rails-and-bootstrap-like-romeo-and-juliet-with-less-murder/"/>
    <updated>2016-01-12T07:41:35-05:00</updated>
    <id>http://sareid.github.io/blog/2016/01/12/rails-and-bootstrap-like-romeo-and-juliet-with-less-murder</id>
    <content type="html"><![CDATA[<h3>Front-end frameworks</h3>

<p>Throughout the first six weeks I&rsquo;ve spent in the Flatiron School&rsquo;s Web Development immersive course, we&rsquo;ve largely stuck to the dark and bewildering world of the back-end, wading waist deep into the nitty-gritty muck and grime of SQL databases and Model View Controller designs. There&rsquo;s been a lot of plain code on plain screens.</p>

<p>But you know what? Sometimes it&rsquo;s nice to feel pretty. So today I&rsquo;m going to talk about front-end frameworks.<!--more--></p>

<p>In the same way that Rails is a framework of helpful tools for developing web-applications, front-end frameworks bring together a library of CSS, HTML and JavaScript tricks and techniques to help make the process of front-end design easier. Rather than creating default layouts and aesthetics from the ground up, they provide a jumping off point that saves you from doing spending a ton of time making sure that your <code>&lt;div&gt;</code> containers aren&rsquo;t bonkers. In short, they&rsquo;re pretty neat.</p>

<p>So let&rsquo;s look at one in particular: <a href="http://getbootstrap.com/">Bootstrap</a>.</p>

<h3>Bootstrap? What are you going on about?</h3>

<p>Bootstrap is the most popular front-end framework in use today, and has been forked over 38,000 times on Github. It began life as &lsquo;Twitter Blueprint&rsquo;, an internal project at Twitter aimed at ensuring coherence of design, and to reduce maintenance burden. The project soon escalated beyond its initial purpose as an internal tool, and in 2011 was released as an open source project. Subsequent versions (currently Version 3 with Version 4 in beta) introduced a focus on mobile design, and a flat, minimalist UI design.</p>

<p>At its core, like any framework, Bootstrap is a toolkit for you to use for your own projects. It can be downloaded as CSS and JS files that can be linked to in your HTML files like any other stylesheet or script. In fact, to reduce filesize, you can download customised versions of these files that contain only the features your want to use.</p>

<p>The <a href="http://getbootstrap.com/">Bootstrap</a> provides an extensive overview of its components, and provides example code that can be easily copied into your projects to get its features working.</p>

<p>But what are these features? Just what exactly is Bootstrap bringing to the table. In the next section, I&rsquo;ll share 5 of things I find lovely about Bootstrap.</p>

<h3>5 nifty Bootstrap features</h3>

<h4>The grid system</h4>

<p>Take a look at any site on the internet, and you are almost literally guaranteed to see the same thing: boxes. Take this very blog for example. All of the features of the site, like the header, blog articles, excerpts, and footer, are made up of different sized and shaped rectangles. This is called grid-based design, and is a pretty ubiquitous principle for web-design, some noteworthy examples not withstand cough cough the <a href="http://www.warnerbros.com/archive/spacejam/movie/jam.htm">surprisingly extant Space Jam website</a> cough cough.</p>

<p><img src="http://i.imgur.com/0OMReu3.png" alt="Some noteworth exceptions not withstandings..." /></p>

<p>A pre-built grid system facilitates quicker front-end design. Bootstrap provides a pre-built system for easily dividing your page into rows and columns. At its core, the screen is divided into 12 columns, labelled in your HTML with the <code>.col</code> class. The number at the end of your <code>.col</code> indicates the width of the particular column you are using, from 1 to 12. In the below screenshot, you can see how different column widths can be placed together. Depending on the size of the browser or screen, these columns become stackable - they automatically drop down to the row below, rather than forcing the user to scroll to the right.</p>

<p><img src="http://i.imgur.com/TjaZJor.png" alt="Example of different column class widths" /></p>

<p>Moreover, the <code>.col</code> class can also be divided altered using the <code>-xs</code>, <code>-sm</code>, <code>-md</code> or <code>-lg</code> modifier. These correspond to media queries, so that we can assign different types of layouts depending upon the device being used.</p>

<p>Your rows and columns must be wrapped within a <code>.container</code> or <code>.container-fluid</code> class. The standard container is a responsive and fixed width container, while the &lsquo;fluid&rsquo; version is full-width and spans the width of your browswer or device screen.</p>

<p>Using this system, you can quickly create a neatly organised site that acts responsively across different sized devices and viewports. In many ways, this is the biggest reason to use a front-end framwork - not just Bootstrap, but other simpler frameworks that focus only on providing grid systems.</p>

<h4>Responsive utilities</h4>

<p>As a compliment to the grid-system, Bootstrap lets you determine which HTML elements are visible or invisible, depending upon the viewport size. By adding the <code>.visible</code> or <code>.hidden</code> class with a particular size (eg. <code>-xs</code> or <code>-sm</code>), you can specifically choose what the user will see.</p>

<h4>Glyphicons</h4>

<p><a href="http://getbootstrap.com/components/#glyphicons">Link to glyphicons on Bootstrap website</a></p>

<h4>Components: Buttons, navs, breadcrumbs and junk</h4>

<p><a href="http://getbootstrap.com/components/#dropdowns">Link to components on the Bootstrap website</a></p>

<h4>More jQuery plugins than you can shake a stick at</h4>

<p><a href="http://getbootstrap.com/javascript/">Link to jQuery plugins on the Bootstrap website</a></p>

<h3>Installing Bootstrap on Rails</h3>

<p>I used Bootstrap for the design of my Sinatra project <a href="https://github.com/sareid/breddit">&lsquo;breddit&rsquo;</a>, precisely because it provided a quick way to organise the page layout into rows and columns. However, when tasked with porting the project to Rails, I had some problems getting the project o recognise my bootstrap files.</p>

<p>Luckily, as we&rsquo;ve discovered with a great many things, there&rsquo;s a gem for that. In your Gemfile, include the following:</p>

<pre><code class="ruby"># Gemfile

...

gem 'bootstrap-sass', '~&gt; 3.2.0'
gem 'autoprefixer-rails'

# NOTE: The sass-rails gem is included with new Rails applications by default.
#       Please make sure that it is not already in your Gemfile before uncommenting it.
# gem 'sass-rails'
</code></pre>

<p>Next, we need to import the CSS assets into our Bootstrap CSS file. As Bootstrap uses different versions of CSS (LESS and SASS), we rename <code>app/assets/stylesheets/application.css</code> to <code>app/assets/stylesheets/application.css.sass</code>, and then add the following code:</p>

<pre><code class="ruby">// app/assets/stylesheets/application.css.sass

@import "bootstrap-sprockets"
@import "bootstrap"
</code></pre>

<p>To import the Javascript components, go to your <code>app/assets/javascripts/application.js</code> and add the following:</p>

<pre><code class="js">// app/assets/javascripts/application.js

...

//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require bootstrap-sprockets
//= require_tree .
</code></pre>

<p>Congratulations! You&rsquo;re off to the races with Bootstrap!</p>
]]></content>
  </entry>
  
</feed>
