<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | andrew does his best]]></title>
  <link href="http://sareid.github.io/blog/categories/ember-dot-js/atom.xml" rel="self"/>
  <link href="http://sareid.github.io/"/>
  <updated>2016-09-15T01:05:26-04:00</updated>
  <id>http://sareid.github.io/</id>
  <author>
    <name><![CDATA[Andrew Reid]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Cool Ember Functions]]></title>
    <link href="http://sareid.github.io/blog/2016/09/04/5-cool-ember-functions/"/>
    <updated>2016-09-04T16:08:46-04:00</updated>
    <id>http://sareid.github.io/blog/2016/09/04/5-cool-ember-functions</id>
    <content type="html"><![CDATA[<p><strong>NOTE: As I&rsquo;ve found too many interesting methods, this will be a two parter, with five more methods to come.</strong></p>

<p><img src="http://i.imgur.com/uRC8hZ1.jpg" alt="Tomster wearing sunglasses" /></p>

<p>One of the biggest challenges of learning Ember (or any framework really) is familiarising yourself with all the tools it provides. Sometimes I&rsquo;ve needed a tool and not known that there&rsquo;s a specific function baked in that does what I need. Of course there are great resources out there like Stack Overflow and the excellent <a href="https://ember-community-slackin.herokuapp.com/">Ember community Slack channel</a>, but even then sometimes it&rsquo;s tricky to find what you&rsquo;re looking for.<!--more--></p>

<p>I&rsquo;ve recently challenged myself to read through the <a href="http://emberjs.com/api/">Ember API documentation</a> in its entirety. It&rsquo;s rather long, and a little dry sometimes, but the best part so far has been discovering all sorts of random and neat functions baked into Ember that I didn&rsquo;t know about. Today I&rsquo;m going to share 5 of my favourites.</p>

<p>I should start by noting that while I&rsquo;ve labeled this post as &lsquo;5 Cool Ember Functions&rsquo;, most of the functions I&rsquo;m looking at are actually methods - that is, they&rsquo;re functions stored as the properties of different objects in Ember.</p>

<h2>1. loc()</h2>

<p><a href="http://emberjs.com/api/classes/Ember.String.html#method_loc">Documentation</a></p>

<p>This is a method of the <a href="http://emberjs.com/api/classes/Ember.String.html#method_loc">Ember.String namespace.</a> Most of the methods in this namespace are concerned with formatting (e.g, changing a string from camelCasing to kebab-casing). The <code>loc()</code> method, however formats the passed string, but first checks to see if it is a key in the <code>Ember.STRING</code> hash. One important use for this is in localisation (or, you know, localization). Take the following example:</p>

<pre><code class="javascript">Ember.STRINGS = {
    '_color': 'colour',
    '_president': 'Prime Minister'
};

Ember.String.loc("_color");  // 'color';
Ember.String.loc("_president");  // 'Prime Minister';
</code></pre>

<p>The <code>loc()</code> method can be called as a helper in a template too. Given the above bit of code, you could have a template like this:

    <h1>
      {{loc &lsquo;_president&rsquo;}}
    </h1>

&hellip;would be translated to:

    <h1>
      Prime Minister
    </h1>
</p>

<h2>2. invoke()</h2>

<p><a href="http://emberjs.com/api/classes/Ember.Array.html#method_invoke">Documentation</a></p>

<p>This method is part of Ember&rsquo;s <a href="https://github.com/emberjs/ember.js/blob/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L682">Enumerable mixin</a>, which is inherited by the Ember.Array class, amongst others. In short, it invokes a named function on every element in the collection it is called upon (like an array), with the ability to take additional arguments. One neat use of it is for simplifying <code>foreach</code> iterations where a single function is called upon each element in the collection, like this:</p>

<pre><code class="javascript">sampleArray.forEach(function(item) {
  item.sampleMethod(argument);
});
</code></pre>

<p>Instead, the invoke function can be used to provide a simpler piece of code, like this:</p>

<pre><code class="javascript">sampleArray.invoke('sampleMetod', argument);
</code></pre>

<p>Much simpler!</p>

<h2>3. mapBy()</h2>

<p><a href="http://emberjs.com/api/classes/Ember.Array.html#method_mapBy">Documentation</a></p>

<p>If you&rsquo;ve used JavaScript (or, in fact, Ruby), you&rsquo;re most likely familiar with the <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map()</a> function, which allows you to call a function on each item in an enumerable and return a new array with the resulting values. The <code>mapBy()</code> method is similar to this function, but it used when your array is composed of enumerables. It extracts the values of a specified property from those arrays and returns their value as a new array. Take the following example:</p>

<pre><code class="javascript">var superman = Ember.Object.create({
  superpower: "Invicibility"
});

var batman = Ember.Object.create({
  superpower: "Money"
});

var superheroes = [superman, batman]

superheroes.mapBy('superpower');
//=&gt;["Invicibility", "Money"]
</code></pre>

<h2>4. sendAction()</h2>

<p><a href="http://emberjs.com/api/classes/Ember.Component.html#method_sendAction">Documentation</a></p>

<p>This method belongs to the Ember.Component class, and calls an action that has been passed into a component from the corresponding controller or route handler. It allows you to translate events that happen within a component (like a click, hover, or scroll) into a specific action, while also passing alongs parameters obtained within the component.</p>

<p>For example, I recently put together a <a href="https://dragndrop-recipe-book.herokuapp.com/recipes">recipe book app that demos HTML5 drag and drop</a> in Ember. As part of the demo, I built a <code>draggable-dropzone</code> component, where items could be dragged over and released, in this case associating an ingredient with a recipe. The JavaScript for this component is as follows:</p>

<pre><code class="javascript">
import Ember from 'ember';

var { set } = Ember;

export default Ember.Component.extend({
  classNames: ['draggableDropzone'],
  classNameBindings: ['dragClass'],
  dragClass: 'deactivated',

  dragLeave(event) {
    event.preventDefault();
    set(this, 'dragClass', 'deactivated');
  },

  dragOver(event) {
    event.preventDefault();
    set(this, 'dragClass', 'activated');
  },

  drop(event) {
    var data = event.dataTransfer.getData('text/data');
    this.sendAction('dropped', data, this.get('recipeId'));

    set(this, 'dragClass','deactivated');
  }
});
</code></pre>

<p>When the <code>drop</code> function is triggered, by dragging an item and dropping it over the component, it assigns the data from the item being dragged (in this case the ID of an ingredient) to a <code>data</code> variable. It then invokes the <code>sendAction()</code> method, which triggers the <code>dropped</code> method, passing both the <code>data</code> variable, and the ID of the recipe currently being shown in the template.</p>

<p>I&rsquo;ve included this component into the <code>app/templates/recipes/recipe.hbs</code> template using the following code:</p>

<p>
    {{#draggable-dropzone dropped=&ldquo;addIngredient&rdquo; recipeId=model.recipe.id}}
    &hellip;some html
    {{/draggable-dropzone}}
</p>

<p>You can see here that the <code>dropped</code> method, passed into the component, corresponds to the addIngredient action in the <code>app/routes/recipes/recipe.js</code> route, which looks like this:</p>

<pre><code class="javascript">import Ember from 'ember';

export default Ember.Route.extend({
  model: function(params){
    return Ember.RSVP.hash({
      recipe: this.store.findRecord('recipe', params.recipe_id),
      ingredients: this.store.findAll('ingredient')
    });
  },

  actions: {
    addIngredient(ingredientId, recipeId){
      let recipe = this.get('store').peekRecord('recipe', recipeId);
      let ingredient = this.get('store').peekRecord('ingredient', ingredientId);
      recipe.get('ingredients').pushObject(ingredient);
      recipe.save();
    },
    removeIngredient(ingredientId, recipeId){
      let recipe = this.get('store').peekRecord('recipe', recipeId);
      let ingredient = this.get('store').peekRecord('ingredient', ingredientId);
      recipe.get('ingredients').removeObject(ingredient);
      recipe.save();
    }
  }
});
</code></pre>

<p>So, you can see that by using the <code>sendAction()</code> method in the component, we&rsquo;re able to invoke actions from the route or controller corresponding to the template the component is rendered in. In this case, the <code>addIngredient</code> has been triggered, associating the ingredient and recipe together and persisting this information to the database.</p>

<h2>5. RSVP.hash()</h2>

<p><a href="http://emberjs.com/api/classes/RSVP.html#method_hash">Documentation</a></p>

<p>This method belongs to Ember&rsquo;s RSVP class, and takes an object/hash composed of multiple promises. It returns a promise when all of these promises have been fulfilled, consisting of a hash whose keys mirror those of the original object/hash passed into the method.</p>

<p>If that seems unclear, I found a really great use for this method recently - scenarios where you want to specify multiple models on a single route. Many times, a single route has a single model, like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ember</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">store</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">modelName</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">But</span> <span class="nx">what</span> <span class="k">if</span> <span class="nx">you</span> <span class="nx">want</span> <span class="nx">to</span> <span class="nx">have</span> <span class="nx">access</span> <span class="nx">to</span> <span class="nx">multiple</span> <span class="nx">models</span> <span class="nx">on</span> <span class="nx">a</span> <span class="nx">single</span> <span class="nx">route</span><span class="o">?</span> <span class="nx">You</span> <span class="nx">can</span><span class="p">,</span> <span class="kd">with</span> <span class="err">`</span><span class="nx">RSVP</span><span class="p">.</span><span class="nx">hash</span><span class="p">()</span><span class="err">`</span><span class="p">,</span> <span class="nx">like</span> <span class="k">this</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt; javascript&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ember</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">RSVP</span><span class="p">.</span><span class="nx">hash</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">firstModel</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">findRecord</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">firstModel</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">first_model_id</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">secondModels</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">findAll</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">secondModel</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="nx">The</span> <span class="nx">method</span> <span class="nx">waits</span> <span class="k">for</span> <span class="nx">both</span> <span class="nx">the</span> <span class="nx">promises</span> <span class="p">(</span><span class="k">in</span> <span class="k">this</span> <span class="k">case</span> <span class="nx">queries</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">database</span><span class="p">)</span> <span class="nx">to</span> <span class="nx">be</span> <span class="nx">fulfilled</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">then</span> <span class="nx">returns</span> <span class="nx">an</span> <span class="nx">object</span> <span class="kd">with</span> <span class="nx">two</span> <span class="nx">keys</span><span class="o">:&lt;</span><span class="err">/code&gt;firstModel&lt;code&gt;and&lt;/code&gt;secondModel`, whose values correspond to the data retrieved from the database.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Conclusions</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">That</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="nx">s</span> <span class="nx">just</span> <span class="nx">a</span> <span class="nx">taste</span> <span class="nx">of</span> <span class="nx">some</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">interesting</span> <span class="nx">methods</span> <span class="nx">I</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="nx">ve</span> <span class="nx">come</span> <span class="nx">across</span> <span class="k">in</span> <span class="nx">Ember</span> <span class="nx">so</span> <span class="nx">far</span><span class="p">.</span> <span class="nx">As</span> <span class="nx">mentioned</span> <span class="nx">at</span> <span class="nx">the</span> <span class="nx">start</span> <span class="nx">of</span> <span class="k">this</span> <span class="nx">post</span><span class="p">,</span> <span class="nx">I</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="nx">m</span> <span class="nx">going</span> <span class="nx">to</span> <span class="nx">create</span> <span class="nx">a</span> <span class="nx">followup</span> <span class="nx">showing</span> <span class="nx">five</span> <span class="nx">more</span> <span class="nx">interesting</span> <span class="nx">methods</span><span class="p">,</span> <span class="nx">so</span> <span class="nx">stay</span> <span class="nx">tuned</span><span class="o">!&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;</span><span class="err">/content&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/entry&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">title</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="nx">CDATA</span><span class="p">[</span><span class="nx">ES2015</span> <span class="nx">and</span> <span class="nx">Destructuring</span> <span class="nx">Assignment</span><span class="p">]]</span><span class="o">&gt;&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://sareid.github.io/blog/2016/08/03/es6-and-the-destructuring-assignment/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">updated</span><span class="o">&gt;</span><span class="mi">2016</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">03</span><span class="nx">T13</span><span class="o">:</span><span class="mi">04</span><span class="o">:</span><span class="mi">22</span><span class="o">-</span><span class="mi">04</span><span class="o">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="err">/updated&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">id</span><span class="o">&gt;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//sareid.github.io/blog/2016/08/03/es6-and-the-destructuring-assignment&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">content</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="nx">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">This</span> <span class="nx">blog</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">simple</span> <span class="nx">one</span> <span class="o">-</span> <span class="nx">I</span> <span class="nx">just</span> <span class="nx">wanted</span> <span class="nx">to</span> <span class="nx">write</span> <span class="nx">a</span> <span class="nx">bit</span> <span class="nx">about</span> <span class="nx">a</span> <span class="nx">neat</span> <span class="nx">technique</span> <span class="k">in</span> <span class="nx">ES2015</span> <span class="k">for</span> <span class="nx">declaring</span> <span class="nx">and</span> <span class="nx">assigning</span> <span class="nx">variables</span> <span class="nx">that</span> <span class="nx">I</span> <span class="nx">was</span> <span class="nx">heretofore</span> <span class="nx">unfamiliar</span> <span class="kd">with</span><span class="o">:</span> <span class="nx">destructuring</span> <span class="nx">assignment</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Recently</span><span class="p">,</span> <span class="k">while</span> <span class="nx">reading</span> <span class="nx">a</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://emberway.io/ember-js-and-html5-drag-and-drop-fa5dfe478a9a#.4fqjphkvm&quot;</span><span class="o">&gt;</span><span class="nx">blog</span> <span class="nx">post</span><span class="o">&lt;</span><span class="err">/a&gt; on implementing drag and drop functionality in Ember.js with HTML5, I noticed a method of variable declaration in JavaScript that was new to me. In the code for a specific component, I saw this:&lt;!--more--&gt;</span>
</span></code></pre></td></tr></table></div></figure> javascript
import Ember from &lsquo;ember&rsquo;;</p>

<p>var { set } = Ember;
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">The</span> <span class="nx">first</span> <span class="nx">line</span> <span class="nx">is</span> <span class="nx">one</span> <span class="nx">I</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="nx">ve</span> <span class="nx">seen</span> <span class="nx">a</span> <span class="nx">lot</span> <span class="o">-</span> <span class="nx">it</span> <span class="nx">assigns</span> <span class="nx">the</span> <span class="nx">actual</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">js</span> <span class="nx">library</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">form</span> <span class="nx">of</span> <span class="nx">an</span> <span class="nx">object</span> <span class="nx">to</span> <span class="nx">an</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Ember</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="nx">variable</span><span class="p">,</span> <span class="nx">giving</span> <span class="nx">us</span> <span class="nx">easy</span> <span class="nx">access</span> <span class="nx">to</span> <span class="nx">it</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">subsequent</span> <span class="nx">code</span><span class="p">.</span> <span class="nx">This</span> <span class="nx">object</span> <span class="nx">consists</span> <span class="nx">of</span> <span class="nx">a</span> <span class="nx">large</span> <span class="nx">number</span> <span class="nx">of</span> <span class="nx">properties</span><span class="p">,</span> <span class="nx">each</span> <span class="nx">of</span> <span class="nx">which</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">method</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">js</span> <span class="nx">library</span><span class="p">.</span> <span class="nx">The</span> <span class="nx">next</span> <span class="nx">line</span> <span class="nx">was</span> <span class="nx">a</span> <span class="nx">bit</span> <span class="nx">more</span> <span class="nx">puzzling</span> <span class="nx">to</span> <span class="nx">me</span><span class="p">.</span> <span class="nx">Why</span> <span class="nx">was</span> <span class="nx">the</span> <span class="nx">variable</span> <span class="nx">name</span> <span class="nx">wrapped</span> <span class="k">in</span> <span class="nx">curly</span> <span class="nx">braces</span> <span class="nx">like</span> <span class="nx">that</span><span class="o">?&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">So</span><span class="p">,</span> <span class="nx">I</span> <span class="nx">did</span> <span class="nx">what</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://www.theallium.com/engineering/computer-programming-to-be-officially-renamed-googling-stackoverflow/&quot;</span><span class="o">&gt;</span><span class="nx">programmers</span> <span class="k">do</span> <span class="nx">best</span><span class="o">&lt;</span><span class="sr">/a&gt;, and soon found myself on the &lt;a href=&quot;https:/</span><span class="o">/</span><span class="nx">developer</span><span class="p">.</span><span class="nx">mozilla</span><span class="p">.</span><span class="nx">org</span><span class="o">/</span><span class="nx">en</span><span class="o">-</span><span class="nx">US</span><span class="o">/</span><span class="nx">docs</span><span class="o">/</span><span class="nx">Web</span><span class="o">/</span><span class="nx">JavaScript</span><span class="o">/</span><span class="nx">Reference</span><span class="o">/</span><span class="nx">Operators</span><span class="o">/</span><span class="nx">Destructuring_assignment</span><span class="s2">&quot;&gt;relevant part&lt;/a&gt; of MDN&amp;rsquo;s JavaScript section. Here&amp;rsquo;s what I learned.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h3&gt;Destructuring assignment&lt;/h3&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;A new feature in &lt;a href=&quot;</span><span class="nx">https</span><span class="o">:</span><span class="c1">//babeljs.io/docs/learn-es2015/&quot;&gt;ES2015&lt;/a&gt;, destructuring assignment syntax allows us to &amp;ldquo;extract data from arrays or objects into distinct variables&amp;rdquo;. What this means, is that given an array or object, we can declare a variable and immediately assign it specific elements or properties as a value. Here&amp;rsquo;s a simple example (we&amp;rsquo;ll start with arrays and then move to objects):</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">javascript</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="kd">var</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span> <span class="c1">// 1</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span> <span class="c1">// 2</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;</span>
</span><span class='line'><span class="nx">As</span> <span class="nx">you</span> <span class="nx">can</span> <span class="nx">see</span><span class="p">,</span> <span class="nx">using</span> <span class="nx">destructuring</span> <span class="nx">assignment</span> <span class="k">in</span> <span class="nx">line</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">we</span> <span class="nx">declare</span> <span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">first</span><span class="o">&lt;</span><span class="err">/code&gt; and &lt;code&gt;second&lt;/code&gt; variables, and assign them values corresponding to the same elements in the &lt;code&gt;array&lt;/code&gt; variable. In this case, the first two elements are used, and the rest are automatically skipped. But we could skip the first element too, like this:</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">javascript</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="kd">var</span> <span class="p">[,</span> <span class="nx">second</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span> <span class="c1">// We get an error, telling us that &#39;first&#39; is undefined.</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span> <span class="c1">// 2</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;</span>
</span><span class='line'><span class="nx">We</span> <span class="nx">can</span> <span class="nx">also</span> <span class="nx">assign</span> <span class="k">default</span> <span class="nx">values</span><span class="p">,</span> <span class="k">in</span> <span class="k">case</span> <span class="nx">the</span> <span class="nx">data</span> <span class="nx">extracted</span> <span class="nx">from</span> <span class="nx">an</span> <span class="nx">array</span> <span class="nx">is</span> <span class="kc">undefined</span><span class="p">,</span> <span class="nx">like</span> <span class="nx">the</span> <span class="nx">following</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure> javascript
var first, second;</p>

<p>[first=6, second=7] = [1];
console.log(first); // 1
console.log(second); // 7</p>

<pre><code>
###Object destructuring
Just like with the examples of arrays above, we can use destructuring assignment on objects too, assigning specific object properties as values to the newly declared variables. Take the following example, where the `outfit()` function returns an object:
</code></pre>

<p>function outfit(){
  return {pants: &ldquo;blue&rdquo;, shirt: &ldquo;red&rdquo;, hat: &ldquo;yello&rdquo;};
}</p>

<p>var {pants} = outfit(); // pants = &ldquo;blue&rdquo;</p>

<pre><code>
As was the case with elements of arrays, we use destructuring assignment to assign a specific property of an object as the variable's value - in this case, picking out the `pants` propety so the newly declared variable has a value of the string of 'blue'. We can also use this assign properties to variables with different names, using the following syntax:
</code></pre>

<p>function outfit(){
  return {pants: &ldquo;blue&rdquo;, shirt: &ldquo;red&rdquo;, hat: &ldquo;yello&rdquo;};
}</p>

<p>var {pants: trousers} = outfit(); // trousers = &ldquo;blue&rdquo;
<code>``
Here, the new</code>trousers<code>variable has the same value as the</code>pants` property.</p>

<h3>Back to the initial example</h3>

<p>Okay, so now that we understand destructuring assignment a little better, let&rsquo;s look at that original bit of code from the blog above:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ember</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="p">{</span> <span class="nx">set</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="nx">So</span><span class="p">,</span> <span class="nx">clearly</span> <span class="nx">we</span><span class="s1">&#39;re looking for a property called &#39;</span><span class="nx">set</span><span class="s1">&#39; that exists in the variable&lt;/code&gt;Ember&lt;code&gt;. If you recall from above, the first line of code created the variable&lt;/code&gt;Ember&lt;code&gt;, which is an object whose properties are the set of functions comprising the Ember.js library. Looking into the Ember.js library, we find a place where a&lt;/code&gt;set` function is defined, and above it the following note:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;</span>
</span><span class='line'><span class="s1">  /**</span>
</span><span class='line'><span class="s1">    Sets the value of a property on an object, respecting computed properties</span>
</span><span class='line'><span class="s1">    and notifying observers and other listeners of the change. If the</span>
</span><span class='line'><span class="s1">    property is not defined but the object implements the `setUnknownProperty`</span>
</span><span class='line'><span class="s1">    method then that will be invoked as well.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">    ...</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  */</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt; By using destructuring assignment, we assigned the &lt;code&gt;set&lt;/code&gt; variable the value of the &lt;code&gt;set&lt;/code&gt; function property from this object, which (we can see from the description) lets us change the values on an object in a way that will trigger any observers, listeners, or computed properties, meaning that changes will be reflected in the view. So, basically it&amp;rsquo;s equivalent of calling &lt;code&gt;Ember.set()&lt;/code&gt;.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;Why do this? Afterall, it&amp;rsquo;s not much more effort to simply invoke the function with &lt;code&gt;Ember.set()&lt;/code&gt;. There are a couple of reasons to use destructuring assignment in general, but in this case I think the answer lies in ensuring the code is resilient. Take a look at the rest of the code from the controller:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;export default Ember.Component.extend({</span>
</span><span class='line'><span class="s1">classNames        : [ &#39;</span><span class="nx">draggableDropzone</span><span class="s1">&#39; ],</span>
</span><span class='line'><span class="s1">classNameBindings : [ &#39;</span><span class="nx">dragClass</span><span class="s1">&#39; ],</span>
</span><span class='line'><span class="s1">dragClass         : &#39;</span><span class="nx">deactivated</span><span class="s1">&#39;,</span>
</span><span class='line'>
</span><span class='line'><span class="s1">dragLeave(event) {</span>
</span><span class='line'><span class="s1">  event.preventDefault();</span>
</span><span class='line'><span class="s1">  set(this, &#39;</span><span class="nx">dragClass</span><span class="s1">&#39;, &#39;</span><span class="nx">deactivated</span><span class="s1">&#39;);</span>
</span><span class='line'><span class="s1">},</span>
</span><span class='line'>
</span><span class='line'><span class="s1">dragOver(event) {</span>
</span><span class='line'><span class="s1">  event.preventDefault();</span>
</span><span class='line'><span class="s1">  set(this, &#39;</span><span class="nx">dragClass</span><span class="s1">&#39;, &#39;</span><span class="nx">activated</span><span class="s1">&#39;);</span>
</span><span class='line'><span class="s1">},</span>
</span><span class='line'>
</span><span class='line'><span class="s1">drop(event) {</span>
</span><span class='line'><span class="s1">  var data = event.dataTransfer.getData(&#39;</span><span class="nx">text</span><span class="o">/</span><span class="nx">data</span><span class="s1">&#39;);</span>
</span><span class='line'><span class="s1">  this.sendAction(&#39;</span><span class="nx">dropped</span><span class="s1">&#39;, data);</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  set(this, &#39;</span><span class="nx">dragClass</span><span class="s1">&#39;, &#39;</span><span class="nx">deactivated</span><span class="err">&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">As</span> <span class="nx">you</span> <span class="nx">can</span> <span class="nx">see</span><span class="p">,</span> <span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">set</span><span class="o">&lt;</span><span class="err">/code&gt; is called in three different locations. If the &lt;code&gt;set&lt;/code&gt; function in the Ember.js library were renamed or deprecated at any point, then code in this example might break. If we were calling &lt;code&gt;Ember.set()&lt;/code&gt; instead of using destructuring assignments and then calling &lt;code&gt;set()&lt;/code&gt; each time, we would then have to fix each instance of &lt;code&gt;Ember.set()&lt;/code&gt;. As it stands, we would only have to change the initial variable assignment. Let&amp;rsquo;s say the &lt;code&gt;set&lt;/code&gt; function in the Ember.js library was renamed &lt;code&gt;assign&lt;/code&gt;, we could simply change things to:</span>
</span></code></pre></td></tr></table></div></figure> javascript
import Ember from &lsquo;ember&rsquo;;</p>

<p>var { assign: set } = Ember;
<code>``
As we learned above, this extracts the hypothetical</code>assign<code>function from the Ember.js library, and assigns it to a new</code>set<code>variable. The existing</code>set` variables would still work through the rest of the code, saving us having to fix each case.</p>

<h3>Conclusion</h3>

<p>All in all, destructuring assignments is a cool bit of syntactic sugar that can help make your code simpler and more resilient. In particular, I see use cases with nested arrays, or when you want to declare a variable with a selection of some of object&rsquo;s properties where this could save several lines of code by not having to declare each variable individually. I&rsquo;ve only covered part of the functionality here, so to learn more see the full MDN documentation <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query Params, Metadata and Pagination in Ember.js]]></title>
    <link href="http://sareid.github.io/blog/2016/07/13/using-query-params-in-ember-dot-js/"/>
    <updated>2016-07-13T14:09:31-04:00</updated>
    <id>http://sareid.github.io/blog/2016/07/13/using-query-params-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>A little earlier this year, I was reading an organisation&rsquo;s style guide for working with Ember.js, when I encountered reference to the use of &lsquo;query params&rsquo; in a controller. At the time, still relatively new to Ember, I had no idea what this meant. In the intervening time, though I&rsquo;ve learned a lot. Basically, query params allow for certain application states to be serialised into the URL that wouldn&rsquo;t be otherwise possible through the regular use of routes. In this blog post, I&rsquo;m going to explain the role of query params, and how they can be used in your Ember app to provide some neat functionality. I&rsquo;ll be using a sample Ember.js front-end app, with a Rails API on the back-end.<!--more--></p>

<h3>Query Param Basics</h3>

<p>Consider the following URL: <code>http://www.fakewebsite.com/recipes?page=2</code>. The text to the right of the &lsquo;?&rsquo; is a query param - in this case &lsquo;page&rsquo;, with a value of 2. As you might guess, this url represents the second &lsquo;page&rsquo; of a longer list of recipes. If you had 1000 recipes in your database, you can understand the utility for paginating the index page into smaller chunks. The user probably finds it easier to read a smaller number of recipes, from a UX perspective it may be preferable to avoid scrolling through long lists, and if there is any heavy logic being done on the back-end, it&rsquo;s faster to simply request 10, 25 or 50 entries at a time than the full 1000. Other uses for query params can include sorting and filtering your database according to certain properties.</p>

<p>Query params are declared in the relevant controller of the route you&rsquo;re working with. So, if you want query params for a &lsquo;recipes&rsquo; route, the query params are declared in <code>app/controllers/recipes.js</code> (or the <code>controller.js</code> file in the <code>recipes</code> directory if you&rsquo;re working with pods). Specific instructions for declaring query params can be <a href="https://guides.emberjs.com/v2.6.0/routing/query-params/">found in the Ember docs</a>, but lets build out an app to see how they work.</p>

<h3>Getting started</h3>

<p>To test out query params, I built an Ember.js app that displays a list of friends with a number of properties (like name, email, phone number, age, etc). The data is served as JSON from a Rails API.</p>

<p>The finished code can be found here: <a href="https://github.com/sareid/query-params">Ember front-end</a> &amp; <a href="https://github.com/sareid/query-params-api">Rails API</a></p>

<h3>Setting up the Rails API and adding a root node</h3>

<p>I&rsquo;m not going to go into all the steps of setting up a Rails API. Sophie DeBenedetto has a great step-by-step guide for this on her blog <a href="http://www.thegreatcodeadventure.com/building-a-super-simple-rails-api/">here</a>. This app has a single model, Person, and a single route <code>people</code>. You can take a look at the <a href="https://github.com/sareid/query-params-api/blob/master/query-params-api/db/migrate/20160712181102_create_person.rb">migration file</a> to see the properties of the model.</p>

<p>To populate the database with entries, I wrote a <code>seed.rb</code> file that makes 400 instances of people using the <a href="https://github.com/stympy/faker">Faker gem</a> which automatically generates content for different types of properties, like this:
<code>ruby
400.times do
  person = Person.create(
    first_name: Faker::Name.first_name,
    last_name: Faker::Name.last_name,
    nick_name: Faker::Superhero.name,
    age: Faker::Number.between(18, 99),
    email: Faker::Internet.email,
    phone: Faker::PhoneNumber.phone_number,
    friends_since: Faker::Time.backward(5004, :evening)
  )
end
</code></p>

<p>There is one extra thing we need to do beyond Sophie&rsquo;s instructions: recent updates to the Active Model Serializer gem use the <code>Attributes</code> adapter for serializing JSON, which excludes the root node (eg, the name of the model). As such, we get JSON like this:</p>

<pre><code class="json">{
id: 1,
first_name: "Aiden",
last_name: "Stamm",
nick_name: "Doctor Match",
age: 35,
email: "devan@predovicortiz.org",
phone: "562.135.0643 x8216",
friends_since: "2007-01-09T00:49:32.000Z"
},
{
id: 2,
first_name: "Jamie",
last_name: "Boyer",
nick_name: "Songbird",
age: 56,
email: "neva@hartmann.co",
phone: "(858) 284-7728",
friends_since: "2007-07-30T21:08:20.000Z"
}
</code></pre>

<p>For the model hook in Ember to function properly, we need a root node with the name of model. To do so, we need to instruct Rails to use the <code>JSON</code> adapter. In the <code>config/intializers</code> directory, I included a <code>serializer.rb</code> file with the following line of code:</p>

<pre><code class="ruby">ActiveModelSerializers.config.adapter = :json
</code></pre>

<p>With that change, the JSON served by our API looks like this:</p>

<pre><code class="json">people: [
{
id: 1,
first_name: "Aiden",
last_name: "Stamm",
nick_name: "Doctor Match",
age: 35,
email: "devan@predovicortiz.org",
phone: "562.135.0643 x8216",
friends_since: "2007-01-09T00:49:32.000Z"
},
{
id: 2,
first_name: "Jamie",
last_name: "Boyer",
nick_name: "Songbird",
age: 56,
email: "neva@hartmann.co",
phone: "(858) 284-7728",
friends_since: "2007-07-30T21:08:20.000Z"
}
]
</code></pre>

<p>That&rsquo;s great for now - our API is serving JSON. Let&rsquo;s set up our Ember front-end.</p>

<h3>Building an Ember app and connecting it to the API</h3>

<p>To start, generate a new Ember app with the <code>ember new</code> command (for more, <a href="https://guides.emberjs.com/v2.6.0/getting-started/quick-start/#toc_create-a-new-application">see the Ember docs</a>).</p>

<p>In this project, I just wanted to build an index page for all the people in the database. As such, we need to set up the route, model, route handler, template and controller for &lsquo;people&rsquo; (fun note: the Inflector in Rails is smart enough to know that &lsquo;people&rsquo; is the plural of &lsquo;person&rsquo;). Run <code>ember g resource people</code>. This creates three important files: <code>app/models/person.js</code>, <code>app/routes/people.js</code>, and <code>app/templates/people.hbs</code> (as well as a file for tests). It also adds the appropriate route - if you look in your <code>app/router.js</code> file you&rsquo;ll see the following:</p>

<pre><code class="javascript">import Ember from 'ember';
import config from './config/environment';

const Router = Ember.Router.extend({
  location: config.locationType
});

Router.map(function() {
  this.route('people');
});

export default Router;
</code></pre>

<p>If we run our server (<code>ember s</code>) we can navigate to <code>http://localhost:4200/people</code>. There&rsquo;s nothing there yet, of course, but it&rsquo;s a route! We need to fill out a few more things before our Ember app can actually make requests to our Rails API. First, lets build out the rest of the &lsquo;people&rsquo; resource.</p>

<p>We need to define the &lsquo;person&rsquo; model and the types of properties that will provided by our API. In <code>app\models\person.js</code> we add the following:</p>

<pre><code class="javascript">import DS from 'ember-data';
import attr from 'ember-data/attr';

export default DS.Model.extend({
  first_name: attr(),
  last_name: attr(),
  nick_name: attr(),
  age: attr(),
  email: attr(),
  phone: attr(),
  friends_since: attr(),

});
</code></pre>

<p>We then need to add a model hook to the &lsquo;people&rsquo; route handler that will load the model from the store. In the <code>app\routes\people.js</code> we add the following:</p>

<pre><code class="javascript">
import Ember from 'ember';

export default Ember.Route.extend({
  model: function() {
    return this.store.findAll('person');
  }
});
</code></pre>

<p>For the moment, we don&rsquo;t need to add anything new to our controller, but we do need to fill out the <code>app/templates/people.hbs</code> template a bit. To make our front-end styling a little simpler, I&rsquo;m using the <a href="http://foundation.zurb.com/">Zurb Foundation</a> responsive framework. Don&rsquo;t worry if you don&rsquo;t understand how it works. I installed into my Ember app using the <a href="https://github.com/nadavshatz/ember-cli-foundation-sass">Ember Cli Foundation Sass addon</a>.</p>

<p>In the template, I build a table of all the people in our database using the <code>#each model as</code> helper. It looks like this (ignore the spaces between the curly braces):</p>

<p></p>

<table>
  <thead>
    <th>First Name</th>
    <th>Last Name</th>
    <th>Nickname</th>
    <th>Age</th>
    <th>Email</th>
    <th>Phone</th>
    <th>Friends Since</th>
  </thead>
  <tbody>
    { {#each model as |person|} }
    <tr>
      <td>{ {person.first_name} }</td>
      <td>{ {person.last_name} }</td>
      <td>{ {person.nick_name} }</td>
      <td>{ {person.age} }</td>
      <td>{ {person.email} }</td>
      <td>{ {person.phone} }</td>
      <td>{ {person.friends_since} }</td>
    </tr>
    {{/each}}
  </tbody>
</table>


<p></p>

<p>If we navigate to <code>http://localhost:4200/people</code> we can see our table rendered with the people in our database! That&rsquo;s great. Though, with 400 entries in the database, it involves a LOT of scrolling:</p>

<div style='position:relative;padding-bottom:calc(100% / 1.60)'><iframe src='https://gfycat.com/ifr/TiredHeavyAidi' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>


<p>Ideally, we&rsquo;d like to see things in smaller chunks - that&rsquo;s the whole point of this blog post, afterall! To do this, we need to go back to our API and include some metadata about pagination in the JSON being served.</p>

<h3>Paginating JSON and serving metadata</h3>

<p>When a GET request is sent to the <code>api/v1/people</code> route of our API, the back-end is currently serving all 400 entries back as a response. We need a way to both break the JSON being served into smaller segments, but also to serve information about the data itself (metadata). In the case of pagination, this metadata will include information like how many chunks or &lsquo;pages&rsquo; the database has been segmented into, as well as the current page being served.</p>

<p>The simplest way to incorpate pagination into your API is through the <a href="https://github.com/amatsuda/kaminari">Kaminari gem</a>. There are other options out there, but the comments I&rsquo;ve seen on Stack Overflow and elsewhere seem to favour this gem. Install it by including <code>gem 'kaminari'</code> in your Gemfile, and running <code>$ bundle</code>. With this done, we need to make some changes to our People Controller, as follows:</p>

<pre><code class="ruby">class Api::V1::PeopleController &lt; ApplicationController

  def index

    info = {
      page: params[:page] || 1,
      per_page: params[:per_page] || 10
    }

    @people = Person.page(info[:page]).per(info[:per_page])

    render json: @people, params: info
  end

end
</code></pre>

<p>The info hash sets defaults for the current page, as well as the number of entries per page. Eventually, params included in requests from the Ember app will include the page number, which is what is being used when the Person model is being queried to create the <code>@people</code> variable being rendered as JSON. If we go to <code>http://localhost:3000/people</code>, we&rsquo;ll see that only 10 entries are being served in the JSON. If we got to <code>http://localhost:3000/api/v1/people?page=2</code> we see the next 10 in the database. Cool!</p>

<p>But that&rsquo;s not all - we also need to serve the metadata, telling the Ember app things like which page we&rsquo;re on and how many pages there currently are. Looking at the <a href="https://github.com/rails-api/active_model_serializers/blob/master/docs/howto/add_pagination_links.md#json-adapter">documentation for Active Model Serializer</a>, the solution is quite simple. In our API controller (effectively the application controller), we add the following:</p>

<pre><code class="ruby">def pagination_dict(object)
  {
    current_page: object.current_page,
    next_page: object.next_page,
    prev_page: object.prev_page, # use object.previous_page when using will_paginate
    total_pages: object.total_pages,
    total_count: object.total_count
  }
end
</code></pre>

<p>And in our People Controller, we make a small addition to the code rendering our JSON:</p>

<pre><code class="ruby">class Api::V1::PeopleController &lt; ApplicationController

  def index

    info = {
      page: params[:page] || 1,
      per_page: params[:per_page] || 10
    }

    @people = Person.page(info[:page]).per(info[:per_page])

    render json: @people, params: info, meta: pagination_dict(@people)
  end
end
</code></pre>

<p>Our JSON now has a &lsquo;meta&rsquo; key attached to the end, like this:</p>

<pre><code class="json">meta: {
current_page: 1,
next_page: 2,
prev_page: null,
total_pages: 40,
total_count: 400
}
</code></pre>

<p>We&rsquo;ll be able to execute a query for this in the People route handler in Ember, giving us access to this metadata in the view. So, now it&rsquo;s time to head back to the Ember app!</p>

<h3>Handling metadata and pagination in Ember</h3>

<p>We need to do a number of steps to handle and use the metadata being served with our JSON in Ember. First, we go to the route handler and change the code to the following:</p>

<pre><code class="javascript">import Ember from 'ember';

export default Ember.Route.extend({

  queryParams: {
    page: {
      refreshModel: true
    }
  },

  model: function(params){
    return this.store.query('person', params);
  }

});
</code></pre>

<p>We&rsquo;ve done a couple of things here. The queryParams property includes a key called &lsquo;page&rsquo;. By setting the refreshModel property to &lsquo;true&rsquo;, any changes to the page query param will fire the model hook and make a new request to the API. So if the url is changed from <code>http://localhost:4200/people</code> to <code>http://localhost:4200/people?page=2</code>, the model will be updated automatically.</p>

<p>Next, we need to actually declare our &lsquo;page&rsquo; query param in the <code>app/controllers/people.js</code> file, and give it some logic.</p>

<pre><code class="javascript">import Ember from 'ember';

export default Ember.Controller.extend({
  queryParams: ['page'],
  page: 1,

  metaData: Ember.computed('model', function(){
    let meta = this.get('model.meta');
    meta['second_last'] = meta.total_pages - 1;
    meta['third_last'] = meta.total_pages - 2;
    return meta;
  }),

  lastThreePages: Ember.computed('model', function(){
    if (this.get('page') &lt; this.get('metaData.total_pages') - 3) {
      return false;
    } else {
      return true;
    }
  }),

  actions: {
    nextPage() {
      if (this.get('page') &lt; this.get('metaData.total_pages')){
        let page = this.get('page');
        this.set('page', page + 1);
      }
    },

    prevPage() {
      if (this.get('page') &gt; 1) {
        this.set('page', this.get('page') - 1);
      }
    }
  }

});
</code></pre>

<p>So what&rsquo;s going on here? First, the <code>queryParams</code> array is defining which specific query params we&rsquo;ll be using. In this case, just one: &lsquo;page&rsquo;. The &lsquo;page&rsquo; property below it gives it a default value of 1 - so if we navigate to just <code>http://localhost:4200/people</code>, it will assume we want the first page.</p>

<p>In the <code>metaData</code> computed property, we are accessing the information in the &lsquo;meta&rsquo; key in the JSON our API is serving, giving us access in the view to information like the current page, which we can invoke with <code>metaData.current_page</code>.</p>

<p>There are also a pair of actions: <code>nextPage</code> and <code>prevPage</code>. These do pretty much what you&rsquo;re thinking they will: when triggered, it will change the &lsquo;page&rsquo; query param to the next or previous page, thus updating the model and serving new entries from the database in our view. In the template we&rsquo;ll have two buttons that trigger these actions. We use conditional statements to make sure we can&rsquo;t advance past the last page in the database, or to a page number lower than 1.</p>

<p>Don&rsquo;t worry about the &lsquo;lastThreePages&rsquo; computed property for now - I&rsquo;m adding the pagination system available in Zurb Foundation, and we&rsquo;ll use that property for some conditionals in the view to change how certain buttons are rendered depending on which page we&rsquo;re on.</p>

<p>So, let&rsquo;s add that to our <code>app/templates/people.hbs</code> files and see what we get. In the template, below the original code for the table, we add new code for pagination buttons. Normally we might choose to separate this into a component, but for time&rsquo;s sake I&rsquo;ve just included it in the template itself. The code is a bit lengthy and not particularly important to what this blog is about. If you&rsquo;d like to see it, it&rsquo;s in <a href="https://github.com/sareid/query-params/blob/master/app/templates/people.hbs">the repository here,</a> but I am also certain there are more elegant ways of doing it.</p>

<p>With that all in place, we get something that looks like this:</p>

<div style='position:relative;padding-bottom:calc(100% / 1.60)'><iframe src='https://gfycat.com/ifr/MarvelousMarvelousDogwoodclubgall' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>


<p>As the buttons on the bottom are pressed, the &lsquo;nextPage&rsquo; function is triggered, updating the &lsquo;page&rsquo; query param and making a new request to our Rails API (again, because we set the <code>refreshModel</code> property to &lsquo;true&rsquo;). The person controller in our API takes in the page parameter in the request, queries the database and serves the appropriate data and metadata back to our Ember app. The controller takes the data for the model, extracts the metadata, and then passes it to update the view.</p>

<h3>Conclusions</h3>

<p>So that&rsquo;s a first look at query params, metadata and pagination in Ember! Don&rsquo;t forget, we can use queryParams to serialise a number of different application states into our URL beyond mere pages. We have a <code>filter</code> query param that looks at a particular property and only returns instances from the database where a condition is met. In this example, maybe we filter to find friends who are a particular age. Or we could sort according to certain categories - maybe I&rsquo;d like to see my friends ranked according to how long I&rsquo;ve known them. We can accomplish all this and more with query params.</p>
]]></content>
  </entry>
  
</feed>
