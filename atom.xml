<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[andrew does his best]]></title>
  <link href="http://sareid.github.io/atom.xml" rel="self"/>
  <link href="http://sareid.github.io/"/>
  <updated>2016-01-13T22:12:39-05:00</updated>
  <id>http://sareid.github.io/</id>
  <author>
    <name><![CDATA[Adnrew Reid]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bootstrap: Making Front-end Development Easier Since 1842 (Note to Self: Check Dates)]]></title>
    <link href="http://sareid.github.io/blog/2016/01/12/rails-and-bootstrap-like-romeo-and-juliet-with-less-murder/"/>
    <updated>2016-01-12T07:41:35-05:00</updated>
    <id>http://sareid.github.io/blog/2016/01/12/rails-and-bootstrap-like-romeo-and-juliet-with-less-murder</id>
    <content type="html"><![CDATA[<h3>Front-end frameworks</h3>

<p>Throughout the first six weeks I&rsquo;ve spent in the Flatiron School&rsquo;s Web Development immersive course, we&rsquo;ve largely stuck to the dark and bewildering world of the back-end, wading waist deep into the nitty-gritty muck and grime of SQL databases and Model View Controller designs. There&rsquo;s been a lot of plain code on plain screens.</p>

<p>But you know what? Sometimes it&rsquo;s nice to feel pretty. So today I&rsquo;m going to talk about front-end frameworks.<!--more--></p>

<p>In the same way that Rails is a framework of helpful tools for developing web-applications, front-end frameworks bring together a library of CSS, HTML and JavaScript tricks and techniques to help make the process of front-end design easier. Rather than creating default layouts and aesthetics from the ground up, they provide a jumping off point that saves you from doing spending a ton of time making sure that your <code>&lt;div&gt;</code> containers aren&rsquo;t bonkers. In short, they&rsquo;re pretty neat.</p>

<p>So let&rsquo;s look at one in particular: <a href="http://getbootstrap.com/">Bootstrap</a>.</p>

<h3>Bootstrap? What are you going on about?</h3>

<p>Bootstrap is the most popular front-end framework in use today, and has been forked over 38,000 times on Github. It began life as &lsquo;Twitter Blueprint&rsquo;, an internal project at Twitter aimed at ensuring coherence of design, and to reduce maintenance burden. The project soon escalated beyond its initial purpose as an internal tool, and in 2011 was released as an open source project. Subsequent versions (currently Version 3 with Version 4 in beta) introduced a focus on mobile design, and a flat, minimalist UI design.</p>

<p>At its core, like any framework, Bootstrap is a toolkit for you to use for your own projects. It can be downloaded as CSS and JS files that can be linked to in your HTML files like any other stylesheet or script. In fact, to reduce filesize, you can download customised versions of these files that contain only the features your want to use.</p>

<p>The <a href="http://getbootstrap.com/">Bootstrap</a> provides an extensive overview of its components, and provides example code that can be easily copied into your projects to get its features working.</p>

<p>But what are these features? Just what exactly is Bootstrap bringing to the table. In the next section, I&rsquo;ll share 5 of things I find lovely about Bootstrap.</p>

<h3>5 nifty Bootstrap features</h3>

<h4>The grid system</h4>

<p>Take a look at any site on the internet, and you are almost literally guaranteed to see the same thing: boxes. Take this very blog for example. All of the features of the site, like the header, blog articles, excerpts, and footer, are made up of different sized and shaped rectangles. This is called grid-based design, and is a pretty ubiquitous principle for web-design, some noteworthy examples not withstand cough cough the <a href="http://www.warnerbros.com/archive/spacejam/movie/jam.htm">surprisingly extant Space Jam website</a> cough cough.</p>

<p><img src="http://i.imgur.com/0OMReu3.png" alt="Some noteworth exceptions not withstandings..." /></p>

<p>A pre-built grid system facilitates quicker front-end design. Bootstrap provides a pre-built system for easily dividing your page into rows and columns. At its core, the screen is divided into 12 columns, labelled in your HTML with the <code>.col</code> class. The number at the end of your <code>.col</code> indicates the width of the particular column you are using, from 1 to 12. In the below screenshot, you can see how different column widths can be placed together. Depending on the size of the browser or screen, these columns become stackable - they automatically drop down to the row below, rather than forcing the user to scroll to the right.</p>

<p><img src="http://i.imgur.com/TjaZJor.png" alt="Example of different column class widths" /></p>

<p>Moreover, the <code>.col</code> class can also be divided altered using the <code>-xs</code>, <code>-sm</code>, <code>-md</code> or <code>-lg</code> modifier. These correspond to media queries, so that we can assign different types of layouts depending upon the device being used.</p>

<p>Your rows and columns must be wrapped within a <code>.container</code> or <code>.container-fluid</code> class. The standard container is a responsive and fixed width container, while the &lsquo;fluid&rsquo; version is full-width and spans the width of your browswer or device screen.</p>

<p>Using this system, you can quickly create a neatly organised site that acts responsively across different sized devices and viewports. In many ways, this is the biggest reason to use a front-end framwork - not just Bootstrap, but other simpler frameworks that focus only on providing grid systems.</p>

<h4>Responsive utilities</h4>

<p>As a compliment to the grid-system, Bootstrap lets you determine which HTML elements are visible or invisible, depending upon the viewport size. By adding the <code>.visible</code> or <code>.hidden</code> class with a particular size (eg. <code>-xs</code> or <code>-sm</code>), you can specifically choose what the user will see.</p>

<h4>Glyphicons</h4>

<p><a href="http://getbootstrap.com/components/#glyphicons">Link to glyphicons on Bootstrap website</a></p>

<h4>Components: Buttons, navs, breadcrumbs and junk</h4>

<p><a href="http://getbootstrap.com/components/#dropdowns">Link to components on the Bootstrap website</a></p>

<h4>More jQuery plugins than you can shake a stick at</h4>

<p><a href="http://getbootstrap.com/javascript/">Link to jQuery plugins on the Bootstrap website</a></p>

<h3>Installing Bootstrap on Rails</h3>

<p>I used Bootstrap for the design of my Sinatra project <a href="https://github.com/sareid/breddit">&lsquo;breddit&rsquo;</a>, precisely because it provided a quick way to organise the page layout into rows and columns. However, when tasked with porting the project to Rails, I had some problems getting the project o recognise my bootstrap files.</p>

<p>Luckily, as we&rsquo;ve discovered with a great many things, there&rsquo;s a gem for that. In your Gemfile, include the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bootstrap-sass&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.2.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;autoprefixer-rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># NOTE: The sass-rails gem is included with new Rails applications by default.</span>
</span><span class='line'><span class="c1">#       Please make sure that it is not already in your Gemfile before uncommenting it.</span>
</span><span class='line'><span class="c1"># gem &#39;sass-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to import the CSS assets into our Bootstrap CSS file. As Bootstrap uses different versions of CSS (LESS and SASS), we rename <code>app/assets/stylesheets/application.css</code> to <code>app/assets/stylesheets/application.css.sass</code>, and then add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">sass</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@import</span> <span class="s2">&quot;bootstrap-sprockets&quot;</span>
</span><span class='line'><span class="vi">@import</span> <span class="s2">&quot;bootstrap&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To import the Javascript components, go to your <code>app/assets/javascripts/application.js</code> and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/assets/javascripts/application.js</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//= require jquery</span>
</span><span class='line'><span class="c1">//= require jquery_ujs</span>
</span><span class='line'><span class="c1">//= require turbolinks</span>
</span><span class='line'><span class="c1">//= require bootstrap-sprockets</span>
</span><span class='line'><span class="c1">//= require_tree .</span>
</span></code></pre></td></tr></table></div></figure>


<p>Congratulations! You&rsquo;re off to the races with Bootstrap!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PSTORE and Me: An Uneasy Alliance]]></title>
    <link href="http://sareid.github.io/blog/2015/12/18/pstore-and-me-an-uneasy-alliance/"/>
    <updated>2015-12-18T10:38:21-05:00</updated>
    <id>http://sareid.github.io/blog/2015/12/18/pstore-and-me-an-uneasy-alliance</id>
    <content type="html"><![CDATA[<h3>In the beginning&hellip;</h3>

<p>Earlier in the week, when working on a <a href="https://github.com/sareid/cli-project-week-guidelines-web-1115">little NBA player stats CLI program</a>, I had my first run in with Ruby&rsquo;s <a href="http://ruby-doc.org/stdlib-2.1.2/libdoc/pstore/rdoc/PStore.html">PSTORE class</a> - a mechanism that allows you store Ruby objects that persist between instances of the program running. <!--more--> The program we were building let you build a team of ten basketball players, and we wanted a way for the program to remember your team the next time it started up.</p>

<p>After some wrangling, I got PSTORE to work. The program could save an array of Ruby objects upon shutting down (in this case individual basketball players), and then return that same array upon the next startup. I felt great. I felt triumphant!</p>

<p>&hellip;but I got it to work in the same way that primitive man got fire to &lsquo;work&rsquo;.</p>

<p><img src="http://i.imgur.com/SPFScT0.jpg" alt="Primitive man's experience with PSTORE" /></p>

<p>Sure, those hirsute cave dwellers weren&rsquo;t freezing to death, but they also weren&rsquo;t bandying about high level concepts of thermodynamics. And so, like my primordial kin, I stared into the crackling PSTORE flames, my eyes wide with abject miscomprehension and distrust.</p>

<p>I knew what needed to be done. I needed to wade into PSTORE, to cleanse myself in its waters and emerge a  more competent, capable web developer.</p>

<h3>Cool. Wait. What is this PSTORE you speak of?</h3>

<p>So, first thing&rsquo;s first. What exactly is PSTORE? I think if you were to ask a random person on the street, they might say:</p>

<blockquote><p>PStore implements a file based persistence mechanism based on a Hash. User code can store hierarchies of Ruby objects (values) into the data store file by name (keys). An object hierarchy may be just a single object. User code may later read values back from the data store or even update data, as needed.</p></blockquote>

<p>&hellip;if by &ldquo;random person on the street&rdquo; you meant &ldquo;the Ruby documentation.&rdquo; So what does it mean? It means you can <em>&lsquo;persist data&rsquo;</em> - using PSTORE you can save Ruby objects (in our case, an array of basketball players) to be accessed during a different through a Hash-like structure. Our array was stored as the value for a key called <code>:players</code>. This hash was saved to a .pstore file included in our project.</p>

<h3>Getting started with PSTORE (or How I Learned to Stop Worrying and Love the Persistent Hash)</h3>

<p>PSTORE is part of the standard library, so it can be used by incuding by simply requiring it. No need for pesky gems or ancient voodoo incantations! After that, you need to initialise a new PSTORE object, passing the desired path of the .pstore file as the argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pstore&#39;</span>
</span><span class='line'><span class="n">saved_data</span> <span class="o">=</span> <span class="no">PSTORE</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;filepath.pstore&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The cool thing about this, is that PSTORE detects if the file already exists. If it does, it reads the data in the file and assigns it to the <code>saved_data</code> variable. If not, it creates a new file and assigns it. So, at this point, the value of <code>saved_data</code> is now a persistent hash. Neato.</p>

<p>In our case, we did that as soon as the program first started, in the first method called by our program.
Now, when you actually want to read or write to the .pstore file, you need to do within a &lsquo;transaction&rsquo;. Transactions are an instance method of the PSTORE class.</p>

<h3>Transactions - Cha-Ching!</h3>

<p>So, let&rsquo;s say we wanted to save to the .pstore file. How would we do this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">saved_data</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">saved_data</span><span class="o">[</span><span class="n">key_name</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">key_value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code assigns a value, <code>key_value</code> to a key, <code>:key_name</code> in the PSTORE hash object. The value could be an number of different types of Ruby objects. In the case of our project, it was an array of basketball players.</p>

<p>To read from the .pstore file, and assign its value to a variable that we can use in Ruby, we follow a similar strategy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_variable</span> <span class="o">=</span> <span class="n">saved_data</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">saved_data</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:key_name</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A number of things are happening here. Like the method of saving, we call the #transaction method on <code>saved_data</code>. We use the fetch method to retrieve the value of a particular key (<code>:key_name</code>). The <code>default</code> option is what we will return if no such key is present. Great!</p>

<p>So why do we have to do this in a transaction? If you try with the transaction, Ruby returns an error. Well, from what I understand, this is to ensure that multiple processes don&rsquo;t access the same .pstore file at the same time, avoiding data being written in an incomplete or corrupted state.</p>

<h3>Conclusion: PSTORE is rad and I also I don&rsquo;t fully understand it</h3>

<p>My understanding of PSTORE is way more advanced than it was a few short days ago, but it&rsquo;s still not&hellip;great. There&rsquo;s something called &lsquo;commit&rsquo;, which seems to be a method of finalising the tasks being done in a transaction, but I haven&rsquo;t figured it all out yet. But I&rsquo;ll keep trying.</p>

<p>I guess I&rsquo;m no longer a prehistoric human, staring at a fire and failing to understand what it is. I know what fire is. I think. I just don&rsquo;t know how it fully works. Or why it fully works. So, I guess in terms of of human history, I&rsquo;m somewhere in Ancient Greece.</p>

<p>And that&rsquo;s not nothing.</p>

<p><img src="http://i.imgur.com/RnGi4DZ.jpg" alt="The Ancient Greek's knowledge of fire is akin to my knowledge of PSTORE now." /></p>

<h3>Sources</h3>

<p>Roblog: <a href="https://robm.me.uk/ruby/2014/01/25/pstore.html">Persisting data in Ruby with PStore</a></p>

<p>Codebar: <a href="http://tutorials.codebar.io/ruby/lesson3/tutorial.html">The basics: Storing data - PSTORE</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Week at Flatiron]]></title>
    <link href="http://sareid.github.io/blog/2015/12/09/my-first-week-at-flatiron/"/>
    <updated>2015-12-09T15:09:15-05:00</updated>
    <id>http://sareid.github.io/blog/2015/12/09/my-first-week-at-flatiron</id>
    <content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,<!--more-->
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
]]></content>
  </entry>
  
</feed>
